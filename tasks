#!/bin/bash

set -Eeo pipefail

if [ "$#" -ne 3 ]; then
  echo "Usage: $0 TASK STACK STACK-ENVIRONMENT"
  exit 1
fi

task="$1"
stack_name="$2"
stack_env="$3"
tf_dir=stacks/${stack_name}
env_name=$(jq -r .${stack_env}.name environment.json)

function set_config() {
    state_lock_table=$(jq -r .${stack_env}.dynamo_table environment.json)
    state_bucket=$(jq -r .${stack_env}.bucket_name environment.json)
    s3_state_key=$(jq -r .${stack_env}.state_key_prefix environment.json)${stack_name}/terraform.tfstate
}

export TF_DATA_DIR=.terraform/${stack_name}

if [[ -v TF_PLUGIN_CACHE_DIR ]]; then
  mkdir -p $TF_PLUGIN_CACHE_DIR
fi

function tf_init() {
  terraform init \
    -backend-config key=${s3_state_key} \
    -backend-config bucket=${state_bucket} \
    -backend-config dynamodb_table=${state_lock_table} \
    ${tf_dir}
}

echo "--- ${task} ---"
set_config
case "${task}" in
validate)
  tf_init
  terraform validate ${tf_dir}
  ;;
dojo-validate)
  dojo "./tasks validate ${stack_name} ${stack_env}"
  ;;
plan)
  tf_init
  terraform plan -var environment=$env_name \
    -out=${stack_env}.tfplan ${tf_dir}
  ;;
dojo-plan)
  dojo "./tasks plan ${stack_name} ${stack_env}"
  ;;
apply)
  tf_init
  terraform apply ${stack_env}.tfplan
  ;;
dojo-apply)
  dojo "./tasks apply ${stack_name} ${stack_env}"
  ;;
*)
  echo "Invalid task: '${task}'"
  exit 1
  ;;
esac

set +e