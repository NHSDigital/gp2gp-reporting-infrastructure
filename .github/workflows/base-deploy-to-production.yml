name: "Z-BASE: Deploy - Production"

on:
  workflow_call:
    inputs:
      is_deployment:
        description: "Do you want to run Terraform Apply"
        type: boolean
        default: false
      terraform_stack:
        description: "Which terraform stack directory to run"
        type: string
        required: true
      build_lambda:
        description: "Does the workflow need a lambda build"
        type: boolean
        default: false
      image_tag:
        description: "Does the workflow need an image tag"
        type: string
        default: ""
      git_ref:
        description: "The git_ref to deploy"
        type: string
        default: main

permissions:
  pull-requests: write
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  promote-images-to-prod:
    environment: prod-deploy
    name: Promote images to Production
    if: ${{ inputs.image_tag && inputs.is_deployment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v5
        with:
          repository: NHSDigital/gp2gp-reporting-infrastructure
          ref: ${{ inputs.git_ref }}

      - name: Configure AWS Credentials for Prod
        id: creds
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
          role-skip-session-tagging: true
          mask-aws-account-id: true

      # Needs the AmazonEC2ContainerRegistryPowerUser role
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: "${{ steps.creds.outputs.aws-account-id }},${{ secrets.AWS_DEV_ACCOUNT_ID }}"

      - name: ECR Copy
        id: ecr-copy
        run: |
          source_repo=${{ secrets.AWS_DEV_ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/${{ secrets.AWS_ECR_DEV_REPOSITORY }}${{ inputs.terraform_stack }}
          destination_repo=${{ steps.creds.outputs.aws-account-id }}.dkr.ecr.eu-west-2.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}${{ inputs.terraform_stack }}
          docker pull $source_repo:latest
          docker tag $source_repo:latest $destination_repo:latest
          docker tag $source_repo:latest $destination_repo:${{ steps.checkout.outputs.commit }}
          docker tag $source_repo:latest $destination_repo:${{ inputs.git_ref }}
          docker push $destination_repo:latest
          docker push $destination_repo:${{ steps.checkout.outputs.commit }}
          docker push $destination_repo:${{ inputs.git_ref }}

  plan-infra:
    name: Plan Infrastructure
    needs: [promote-images-to-prod]
    if: always() && (needs.promote-images-to-prod.result == 'skipped' || needs.promote-images-to-prod.result == 'success')
    uses: ./.github/workflows/deploy-stack.yml
    with:
      environment: prod
      is_deployment: ${{ inputs.is_deployment }}
      terraform_stack: ${{ inputs.terraform_stack }}
      image_tag: ${{ inputs.image_tag }}
      build_lambda: ${{ inputs.build_lambda }}
      git_ref: ${{ inputs.git_ref }}
    secrets: inherit

  deploy-infra-no-images:
    if: ${{ always() && inputs.image_tag == '' && inputs.is_deployment && needs.plan-infra.result == 'success' }}
    environment: prod-deploy
    name: Deploy Infrastructure (no images)
    needs: [plan-infra]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./stacks/${{ inputs.terraform_stack }}/terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          repository: NHSDigital/gp2gp-reporting-infrastructure
          ref: ${{ inputs.git_ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ inputs.is_deployment && secrets.AWS_ASSUME_ROLE || secrets.AWS_ASSUME_ROLE_READ_ONLY }}
          role-skip-session-tagging: true
          mask-aws-account-id: true

      - name: Build Lambdas
        if: inputs.build_lambda
        run: |
          cd $GITHUB_WORKSPACE
          chmod +x ./tasks_github_actions.sh
          ./tasks_github_actions.sh build-lambdas

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          terraform init -no-color -backend-config="key=data-pipeline/${{ inputs.terraform_stack }}/terraform.tfstate" \
          -backend-config="bucket=${{ secrets.AWS_STATE_BUCKET }}" \
          -backend-config="dynamodb_table=${{ secrets.AWS_STATE_LOCK_TABLE }}"
        shell: bash

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Setup Terraform variables
        id: vars
        run: |-
          cat > pipeline.auto.tfvars <<EOF
            environment = "${{ vars.AWS_ENVIRONMENT }}"
          EOF

      - name: Setup Terraform variables for Build Lambda
        id: update-lambda-build-references
        if: inputs.build_lambda
        run: |-
          aws_env="${{ vars.AWS_ENVIRONMENT }}"
          cat > pipeline.auto.tfvars <<EOF
              environment = "$aws_env"
              log_alerts_pipeline_error_lambda_zip = "$GITHUB_WORKSPACE/lambda/build/log-alerts-pipeline-error.zip"
              log_alerts_technical_failures_above_threshold_lambda_zip = "$GITHUB_WORKSPACE/lambda/build/log-alerts-technical-failures-above-threshold.zip"
              gp2gp_dashboard_alert_lambda_zip = "$GITHUB_WORKSPACE/lambda/build/gp2gp-dashboard-alert.zip"
              email_report_lambda_zip = "$GITHUB_WORKSPACE/lambda/build/email-report.zip"
              validate_metrics_lambda_zip = "$GITHUB_WORKSPACE/lambda/build/validate-metrics.zip"
              degrades_dashboards_lambda_zip = "$GITHUB_WORKSPACE/lambda/build/degrades-dashboards.zip"
              store_asid_lookup_lambda_zip = "$GITHUB_WORKSPACE/lambda/build/store-asid-lookup.zip"
          EOF

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -input=false -var-file="../vars/${{ vars.AWS_ENVIRONMENT }}.tfvars" -out "${{ vars.AWS_ENVIRONMENT }}.tfplan"
          terraform show -no-color ${{ vars.AWS_ENVIRONMENT }}.tfplan > ${{ vars.AWS_ENVIRONMENT }}.tfplan.txt
          echo "summary=$(grep -E 'Plan: [0-9]+ to add, [0-9]+ to change, [0-9]+ to destroy\.|No changes\. Your infrastructure matches the configuration\.' ${{ vars.AWS_ENVIRONMENT }}.tfplan.txt | sed 's/.*No changes\. Your infrastructure matches the configuration/Plan: no changes/g' | sed 's/.*Plan: //g' | sed 's/\..*//g')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false ${{ vars.AWS_ENVIRONMENT }}.tfplan

  deploy-infra-with-images:
    if: ${{ always() && inputs.image_tag && inputs.is_deployment && needs.plan-infra.result == 'success' }}
    environment: prod-deploy
    name: Deploy Infrastructure (with new image)
    needs: [promote-images-to-prod, plan-infra]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./stacks/${{ inputs.terraform_stack }}/terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          repository: NHSDigital/gp2gp-reporting-infrastructure
          ref: ${{ inputs.git_ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ inputs.is_deployment && secrets.AWS_ASSUME_ROLE || secrets.AWS_ASSUME_ROLE_READ_ONLY }}
          role-skip-session-tagging: true
          mask-aws-account-id: true

      - name: Build Lambdas
        if: inputs.build_lambda
        run: |
          cd $GITHUB_WORKSPACE
          chmod +x ./tasks_github_actions.sh
          ./tasks_github_actions.sh build-lambdas

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          terraform init -no-color -backend-config="key=data-pipeline/${{ inputs.terraform_stack }}/terraform.tfstate" \
          -backend-config="bucket=${{ secrets.AWS_STATE_BUCKET }}" \
          -backend-config="dynamodb_table=${{ secrets.AWS_STATE_LOCK_TABLE }}"
        shell: bash

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Setup Terraform variables
        id: vars
        run: |-
          cat > pipeline.auto.tfvars <<EOF
            environment = "${{ vars.AWS_ENVIRONMENT }}"
          EOF

      - name: Setup Terraform variables for Image Tag
        id: vars-image-tag
        if: inputs.image_tag
        run: |-
          IMAGE_TAG=$(aws ecr describe-images --repository-name ${{ secrets.AWS_ECR_REPOSITORY }}${{ inputs.terraform_stack }} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]')
          cat > pipeline.auto.tfvars <<EOF
          ${{ inputs.image_tag }}_image_tag = $IMAGE_TAG
          environment = "${{ vars.AWS_ENVIRONMENT }}"
          EOF

      - name: Setup Terraform variables for Build Lambda
        id: update-lambda-build-references
        if: inputs.build_lambda
        run: |-
          image_key="${{ inputs.image_tag }}"
          aws_env="${{ vars.AWS_ENVIRONMENT }}"
          cat > pipeline.auto.tfvars <<EOF
              environment = "$aws_env"
              log_alerts_pipeline_error_lambda_zip = "$GITHUB_WORKSPACE/lambda/build/log-alerts-pipeline-error.zip"
              log_alerts_technical_failures_above_threshold_lambda_zip = "$GITHUB_WORKSPACE/lambda/build/log-alerts-technical-failures-above-threshold.zip"
              gp2gp_dashboard_alert_lambda_zip = "$GITHUB_WORKSPACE/lambda/build/gp2gp-dashboard-alert.zip"
              email_report_lambda_zip = "$GITHUB_WORKSPACE/lambda/build/email-report.zip"
              validate_metrics_lambda_zip = "$GITHUB_WORKSPACE/lambda/build/validate-metrics.zip"
              degrades_dashboards_lambda_zip = "$GITHUB_WORKSPACE/lambda/build/degrades-dashboards.zip"
              store_asid_lookup_lambda_zip = "$GITHUB_WORKSPACE/lambda/build/store-asid-lookup.zip"
          EOF
          if [[ -n "$image_key" ]]; then
            IMAGE_TAG=$(aws ecr describe-images --repository-name ${{ secrets.AWS_ECR_REPOSITORY }}${{ inputs.terraform_stack }} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]')
            image_tag=$IMAGE_TAG
            echo "${image_key}_image_tag = $image_tag" >> pipeline.auto.tfvars
            cat pipeline.auto.tfvars
          fi

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -input=false -var-file="../vars/${{ vars.AWS_ENVIRONMENT }}.tfvars" -out "${{ vars.AWS_ENVIRONMENT }}.tfplan"
          terraform show -no-color ${{ vars.AWS_ENVIRONMENT }}.tfplan > ${{ vars.AWS_ENVIRONMENT }}.tfplan.txt
          echo "summary=$(grep -E 'Plan: [0-9]+ to add, [0-9]+ to change, [0-9]+ to destroy\.|No changes\. Your infrastructure matches the configuration\.' ${{ vars.AWS_ENVIRONMENT }}.tfplan.txt | sed 's/.*No changes\. Your infrastructure matches the configuration/Plan: no changes/g' | sed 's/.*Plan: //g' | sed 's/\..*//g')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false ${{ vars.AWS_ENVIRONMENT }}.tfplan
